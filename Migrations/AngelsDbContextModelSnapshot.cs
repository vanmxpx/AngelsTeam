// <auto-generated />
using System;
using AngelsTeam.Model;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace AngelsTeam.Migrations
{
    [DbContext(typeof(AngelsDbContext))]
    partial class AngelsDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.1-servicing-10028")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("AngelsTeam.Model.Credential", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Credentials");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "admin1212",
                            Password = "admin1212",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            Email = "ivanov1212",
                            Password = "ivanov1212",
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            Email = "user1212",
                            Password = "user1212",
                            UserId = 3
                        },
                        new
                        {
                            Id = 4,
                            Email = "mark1212",
                            Password = "mark1212",
                            UserId = 4
                        });
                });

            modelBuilder.Entity("AngelsTeam.Model.Description", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("SubscriptionTypeId");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("SubscriptionTypeId");

                    b.ToTable("Descriptions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            SubscriptionTypeId = 3,
                            Value = "Безлимитные сигналы"
                        },
                        new
                        {
                            Id = 2,
                            SubscriptionTypeId = 3,
                            Value = "Личные консультации"
                        },
                        new
                        {
                            Id = 3,
                            SubscriptionTypeId = 3,
                            Value = "Разбор ваших монет"
                        },
                        new
                        {
                            Id = 4,
                            SubscriptionTypeId = 2,
                            Value = "Приватные сигналы"
                        },
                        new
                        {
                            Id = 5,
                            SubscriptionTypeId = 2,
                            Value = "Приватный чат участников"
                        },
                        new
                        {
                            Id = 6,
                            SubscriptionTypeId = 2,
                            Value = "Продление подписки, если ежемесячный профит составил < 60%"
                        },
                        new
                        {
                            Id = 7,
                            SubscriptionTypeId = 1,
                            Value = "Ознакомление с контентом"
                        },
                        new
                        {
                            Id = 8,
                            SubscriptionTypeId = 1,
                            Value = "Бесплатные сигналы"
                        },
                        new
                        {
                            Id = 9,
                            SubscriptionTypeId = 1,
                            Value = "Разбор некоторых монет"
                        });
                });

            modelBuilder.Entity("AngelsTeam.Model.News", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Attachment");

                    b.Property<string>("Body")
                        .HasMaxLength(1024);

                    b.Property<DateTime>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(2019, 1, 22, 17, 8, 9, 550, DateTimeKind.Local).AddTicks(7055));

                    b.Property<int>("Dislikes")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int>("Likes")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<string>("Title")
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.ToTable("News");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Attachment = "assets/images/test.jpeg",
                            Body = "Дорогие друзья, завтра в 20:00(Мскв) начинается наш обучающий курс. У нас хорошие новости. Освободилось ровно три места. По всем вопросам: Дорогие друзья, завтра в 20:00(Мскв) начинается наш обучающий курс . У нас хорошие новости. Освободилось ровно три места. По всем вопросам: Дорогие друзья, завтра в 20:00(Мскв) начинается наш обучающий курс . У нас хорошие новости. Освободилось ровно три места. По всем вопросам: Дорогие друзья, завтра в 20:00(Мскв) начинается наш обучающий курс . У нас хорошие новости. Освободилось ровно три места. По всем вопросам: Дорогие друзья, завтра в 20:00(Мскв) начинается наш обучающий курс . У нас хорошие новости. Освободилось ровно три места. По всем вопросам:",
                            Date = new DateTime(2019, 1, 22, 17, 8, 9, 572, DateTimeKind.Local).AddTicks(9988),
                            Dislikes = 10,
                            Likes = 20,
                            Title = "Новость дня"
                        },
                        new
                        {
                            Id = 2,
                            Attachment = "assets/images/test.jpeg",
                            Body = "Дорогие друзья, сегодня ...",
                            Date = new DateTime(2019, 1, 22, 17, 8, 9, 573, DateTimeKind.Local).AddTicks(723),
                            Dislikes = 3,
                            Likes = 15,
                            Title = "Новость дня 2"
                        },
                        new
                        {
                            Id = 3,
                            Attachment = "assets/images/test.jpeg",
                            Body = "Дорогие друзья, завтра в 20:00(Мскв) начинается наш обучающий курс. У нас хорошие новости. Освободилось ровно три места. По всем вопросам: Дорогие друзья, завтра в 20:00(Мскв) начинается наш обучающий курс . У нас хорошие новости. Освободилось ровно три места. По всем вопросам: Дорогие друзья, завтра в 20:00(Мскв) начинается наш обучающий курс . У нас хорошие новости. Освободилось ровно три места. По всем вопросам: Дорогие друзья, завтра в 20:00(Мскв) начинается наш обучающий курс . У нас хорошие новости. Освободилось ровно три места. По всем вопросам: Дорогие друзья, завтра в 20:00(Мскв) начинается наш обучающий курс . У нас хорошие новости. Освободилось ровно три места. По всем вопросам:",
                            Date = new DateTime(2019, 1, 22, 17, 8, 9, 573, DateTimeKind.Local).AddTicks(744),
                            Dislikes = 10,
                            Likes = 20,
                            Title = "Новость дня"
                        },
                        new
                        {
                            Id = 4,
                            Attachment = "assets/images/test.jpeg",
                            Body = "Дорогие друзья, завтра в 20:00(Мскв) начинается наш обучающий курс. У нас хорошие новости. Освободилось ровно три места. По всем вопросам: Дорогие друзья, завтра в 20:00(Мскв) начинается наш обучающий курс . У нас хорошие новости. Освободилось ровно три места. По всем вопросам: Дорогие друзья, завтра в 20:00(Мскв) начинается наш обучающий курс . У нас хорошие новости. Освободилось ровно три места. По всем вопросам: Дорогие друзья, завтра в 20:00(Мскв) начинается наш обучающий курс . У нас хорошие новости. Освободилось ровно три места. По всем вопросам: Дорогие друзья, завтра в 20:00(Мскв) начинается наш обучающий курс . У нас хорошие новости. Освободилось ровно три места. По всем вопросам:",
                            Date = new DateTime(2019, 1, 22, 17, 8, 9, 573, DateTimeKind.Local).AddTicks(753),
                            Dislikes = 10,
                            Likes = 20,
                            Title = "Новость дня"
                        });
                });

            modelBuilder.Entity("AngelsTeam.Model.Period", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Periods");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Short"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Middle"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Long"
                        });
                });

            modelBuilder.Entity("AngelsTeam.Model.Profit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("TargetId");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("TargetId");

                    b.ToTable("Profits");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            TargetId = 1,
                            Value = "0.012"
                        },
                        new
                        {
                            Id = 2,
                            TargetId = 1,
                            Value = "0.012"
                        },
                        new
                        {
                            Id = 3,
                            TargetId = 1,
                            Value = "0.012"
                        },
                        new
                        {
                            Id = 4,
                            TargetId = 2,
                            Value = "0.012"
                        },
                        new
                        {
                            Id = 5,
                            TargetId = 2,
                            Value = "0.012"
                        },
                        new
                        {
                            Id = 6,
                            TargetId = 2,
                            Value = "0.012"
                        });
                });

            modelBuilder.Entity("AngelsTeam.Model.Signal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Attachment");

                    b.Property<string>("Body")
                        .HasMaxLength(512);

                    b.Property<string>("Coin")
                        .HasMaxLength(3);

                    b.Property<DateTime>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(2019, 1, 22, 17, 8, 9, 555, DateTimeKind.Local).AddTicks(4435));

                    b.Property<bool>("Free")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<int>("SignalLevelId");

                    b.Property<int>("TargetId");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("SignalLevelId");

                    b.HasIndex("TargetId");

                    b.ToTable("Signals");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Attachment = "assets/images/test.jpeg",
                            Body = "Дорогие друзья, завтра в 20:00(Мскв) начинается наш обучающий курс ",
                            Coin = "BTC",
                            Date = new DateTime(2019, 1, 22, 17, 8, 9, 573, DateTimeKind.Local).AddTicks(4352),
                            Free = true,
                            SignalLevelId = 1,
                            TargetId = 1,
                            Title = "Бесплатный сигнал дня"
                        },
                        new
                        {
                            Id = 2,
                            Attachment = "assets/images/test.jpeg",
                            Body = "Дорогие друзья, завтра в 20:00(Мскв) начинается наш обучающий курс ",
                            Coin = "BTC",
                            Date = new DateTime(2019, 1, 22, 17, 8, 9, 573, DateTimeKind.Local).AddTicks(7028),
                            Free = false,
                            SignalLevelId = 3,
                            TargetId = 2,
                            Title = "Платный сигнал дня"
                        });
                });

            modelBuilder.Entity("AngelsTeam.Model.SignalLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("SignalLevels");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Hight"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Middle"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Low"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Info"
                        });
                });

            modelBuilder.Entity("AngelsTeam.Model.Subscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("SubscribtionTypeId");

                    b.Property<int>("SubscriptionTypeId");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("SubscribtionTypeId");

                    b.HasIndex("SubscriptionTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("Subscriptions");
                });

            modelBuilder.Entity("AngelsTeam.Model.SubscriptionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Duration")
                        .IsRequired()
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 64)))
                        .HasColumnType("varchar(32)");

                    b.Property<string>("Exchange")
                        .HasMaxLength(15);

                    b.Property<string>("Name")
                        .HasMaxLength(64);

                    b.Property<int>("Price");

                    b.HasKey("Id");

                    b.ToTable("SubscriptionTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Duration = "-1",
                            Exchange = "BTC",
                            Name = "Бесплатная",
                            Price = 0
                        },
                        new
                        {
                            Id = 2,
                            Duration = "1",
                            Exchange = "BTC",
                            Name = "Ежемесячная",
                            Price = 2
                        },
                        new
                        {
                            Id = 3,
                            Duration = "-1",
                            Exchange = "BTC",
                            Name = "Безлимитная",
                            Price = 4
                        });
                });

            modelBuilder.Entity("AngelsTeam.Model.Target", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Buy");

                    b.Property<int>("PeriodId");

                    b.Property<string>("Stop");

                    b.HasKey("Id");

                    b.HasIndex("PeriodId");

                    b.ToTable("Targets");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Buy = "0.123",
                            PeriodId = 2,
                            Stop = "0.132"
                        },
                        new
                        {
                            Id = 2,
                            Buy = "0.123",
                            PeriodId = 2,
                            Stop = "0.132"
                        });
                });

            modelBuilder.Entity("AngelsTeam.Model.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ExpirationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValue(new DateTime(2019, 1, 22, 17, 8, 9, 538, DateTimeKind.Local).AddTicks(1000));

                    b.Property<string>("Name")
                        .HasMaxLength(32);

                    b.Property<string>("Photo");

                    b.Property<string>("Surname")
                        .HasMaxLength(32);

                    b.Property<string>("Telegram")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<int>("UserTypeId");

                    b.HasKey("Id");

                    b.HasIndex("UserTypeId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ExpirationDate = new DateTime(2019, 2, 3, 17, 8, 9, 575, DateTimeKind.Local).AddTicks(8842),
                            Name = "Admin",
                            Photo = "assets/images/candles.jpeg",
                            Surname = "Admin",
                            Telegram = "yourAdmin",
                            UserTypeId = 1
                        },
                        new
                        {
                            Id = 2,
                            ExpirationDate = new DateTime(2019, 2, 11, 17, 8, 9, 575, DateTimeKind.Local).AddTicks(9970),
                            Name = "Ivan",
                            Photo = "assets/images/candles.jpeg",
                            Surname = "Ivanov",
                            Telegram = "IvanovIvan",
                            UserTypeId = 2
                        },
                        new
                        {
                            Id = 3,
                            ExpirationDate = new DateTime(2019, 1, 12, 17, 8, 9, 575, DateTimeKind.Local).AddTicks(9996),
                            Name = "Lexa",
                            Photo = "assets/images/candles.jpeg",
                            Surname = "Lepexa",
                            Telegram = "Lepexa",
                            UserTypeId = 3
                        },
                        new
                        {
                            Id = 4,
                            ExpirationDate = new DateTime(2019, 1, 22, 17, 8, 9, 576, DateTimeKind.Local).AddTicks(5),
                            Name = "Mark",
                            Photo = "assets/images/candles.jpeg",
                            Surname = "zuckerberg",
                            Telegram = "MarkZuck",
                            UserTypeId = 4
                        });
                });

            modelBuilder.Entity("AngelsTeam.Model.UserType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("UserTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            Name = "User"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Free"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Unverified"
                        });
                });

            modelBuilder.Entity("AngelsTeam.Model.Credential", b =>
                {
                    b.HasOne("AngelsTeam.Model.User", "User")
                        .WithOne("Credential")
                        .HasForeignKey("AngelsTeam.Model.Credential", "UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AngelsTeam.Model.Description", b =>
                {
                    b.HasOne("AngelsTeam.Model.SubscriptionType")
                        .WithMany("Descriptions")
                        .HasForeignKey("SubscriptionTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AngelsTeam.Model.Profit", b =>
                {
                    b.HasOne("AngelsTeam.Model.Target")
                        .WithMany("Profits")
                        .HasForeignKey("TargetId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AngelsTeam.Model.Signal", b =>
                {
                    b.HasOne("AngelsTeam.Model.SignalLevel", "SignalLevel")
                        .WithMany()
                        .HasForeignKey("SignalLevelId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AngelsTeam.Model.Target", "Target")
                        .WithMany()
                        .HasForeignKey("TargetId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AngelsTeam.Model.Subscription", b =>
                {
                    b.HasOne("AngelsTeam.Model.Profit", "SubscribtionType")
                        .WithMany()
                        .HasForeignKey("SubscribtionTypeId");

                    b.HasOne("AngelsTeam.Model.SubscriptionType")
                        .WithMany("Subscriptions")
                        .HasForeignKey("SubscriptionTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AngelsTeam.Model.User", "User")
                        .WithMany("Subscriptions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AngelsTeam.Model.Target", b =>
                {
                    b.HasOne("AngelsTeam.Model.Period", "Period")
                        .WithMany()
                        .HasForeignKey("PeriodId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AngelsTeam.Model.User", b =>
                {
                    b.HasOne("AngelsTeam.Model.UserType", "UserType")
                        .WithMany()
                        .HasForeignKey("UserTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
